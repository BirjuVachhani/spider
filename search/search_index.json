{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Spider \u00b6 A small dart library to generate Assets dart code from assets folder. It generates dart class with static const variables in it which can be used to reference the assets safely anywhere in the flutter app. Breaking Changes since v1.0.0: \u00b6 Instead of declaring package name separately for each group, spider now takes package key-value pair as a global configuration. Example \u00b6 Before \u00b6 Widget build ( BuildContext context ) { return Image ( image: AssetImage ( 'assets/background.png' )); } After \u00b6 Widget build ( BuildContext context ) { return Image ( image: AssetImage ( Assets . background )); } Generated Assets Class \u00b6 class Assets { static const String background = 'assets/background.png' ; } This method allows no error scope for string typos. Also, it provides auto-complete in the IDE which comes very handy when you have large amount of assets. Watch Directory \u00b6 Spider can also watch given directory for changes in files and rebuild dart code automatically. Use following command to watch for changes: spider build --watch see help for more information: spider build --help Smart Watch (Experimental) \u00b6 The normal --watch option watches for any kind of changes that happens in the directory. However this can be improved my smartly watching the directory. It includes ignoring events that doesn't affect anything like file content changes. Also, it only watches allowed file types and rebuilds upon changes for those files only. Run following command to watch directories smartly. spider build --smart-watch Categorizing by File Extension \u00b6 By default, Spider allows any file to be referenced in the dart code. but you can change that behavior. You can specify which files you want to be referenced. path : assets class_name : Assets package : res types : [ jpg , png , jpeg , webp , bmp , gif ] Use Prefix \u00b6 You can use prefixes for names of the generated dart references. Prefixes will be attached to the formatted reference names. path : assets class_name : Assets package : res prefix : ic Output \u00b6 class Assets { static const String icCamera = 'assets/camera.png' ; static const String icLocation = 'assets/location.png' ; } Advanced Configuration \u00b6 Spider provides supports for multiple configurations and classifications. If you wanna group your assets by module, type or anything, you can do that using groups in spider. Example \u00b6 Suppose you have both vector(SVGs) and raster images in your project and you want to me classified separately so that you can use them with separate classes. You can use groups here. Keep your vector and raster images in separate folder and specify them in the config file. spider.yaml groups : - path : assets/images class_name : Images package : res - path : assets/vectors class_name : Svgs package : res Here, first item in the list indicates to group assets of assets/images folder under class named Images and the second one indicates to group assets of assets/vectors directory under class named Svgs . So when you refer to Images class, auto-complete suggests raster images only and you know that you can use them with AssetImage and other one with vector rendering library. Multi-path configuration \u00b6 From Spider v0.4.0 , multiple paths can be specified for a single group to collect references from multiple directories and generate all the references under single dart class. Example \u00b6 groups : - paths : - assets/images - assets/more_images/ class_name : Images package : res types : [ .png , .jpg , .jpeg , .webp , .webm , .bmp ] By using paths , multiple source directories can be specified. Above example will generate references from assets/images and assets/more_images/ under a single dart class named Images . Generating Tests \u00b6 Spider v0.4.0 adds support for generating test cases for generated dart references to make sure that the asset file is present in the project. These tests can also be run on CI servers. To enable tests generation, specify generate_tests flag in spider.yaml or spider.json configuration file as shown below. generate_tests : true This flag will indicate spider to generate tests for all the generated dart references. Enable Verbose Logging \u00b6 Spider prefers not to overwhelm terminal with verbose logs that are redundant for most of the cases. However those verbose logs come quite handy when it comes to debug anything. You can enable verbose logging by using --verbose option on build command. spider build --verbose # watching directories with verbose logs spider build --watch --verbose Liked spider? \u00b6 Show some love and support by starring the repository. Or You can License \u00b6 Copyright \u00a9 2020 Birju Vachhani Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Home"},{"location":"#spider","text":"A small dart library to generate Assets dart code from assets folder. It generates dart class with static const variables in it which can be used to reference the assets safely anywhere in the flutter app.","title":"Spider"},{"location":"#breaking-changes-since-v100","text":"Instead of declaring package name separately for each group, spider now takes package key-value pair as a global configuration.","title":"Breaking Changes since v1.0.0:"},{"location":"#example","text":"","title":"Example"},{"location":"#before","text":"Widget build ( BuildContext context ) { return Image ( image: AssetImage ( 'assets/background.png' )); }","title":"Before"},{"location":"#after","text":"Widget build ( BuildContext context ) { return Image ( image: AssetImage ( Assets . background )); }","title":"After"},{"location":"#generated-assets-class","text":"class Assets { static const String background = 'assets/background.png' ; } This method allows no error scope for string typos. Also, it provides auto-complete in the IDE which comes very handy when you have large amount of assets.","title":"Generated Assets Class"},{"location":"#watch-directory","text":"Spider can also watch given directory for changes in files and rebuild dart code automatically. Use following command to watch for changes: spider build --watch see help for more information: spider build --help","title":"Watch Directory"},{"location":"#smart-watch-experimental","text":"The normal --watch option watches for any kind of changes that happens in the directory. However this can be improved my smartly watching the directory. It includes ignoring events that doesn't affect anything like file content changes. Also, it only watches allowed file types and rebuilds upon changes for those files only. Run following command to watch directories smartly. spider build --smart-watch","title":"Smart Watch (Experimental)"},{"location":"#categorizing-by-file-extension","text":"By default, Spider allows any file to be referenced in the dart code. but you can change that behavior. You can specify which files you want to be referenced. path : assets class_name : Assets package : res types : [ jpg , png , jpeg , webp , bmp , gif ]","title":"Categorizing by File Extension"},{"location":"#use-prefix","text":"You can use prefixes for names of the generated dart references. Prefixes will be attached to the formatted reference names. path : assets class_name : Assets package : res prefix : ic","title":"Use Prefix"},{"location":"#output","text":"class Assets { static const String icCamera = 'assets/camera.png' ; static const String icLocation = 'assets/location.png' ; }","title":"Output"},{"location":"#advanced-configuration","text":"Spider provides supports for multiple configurations and classifications. If you wanna group your assets by module, type or anything, you can do that using groups in spider.","title":"Advanced Configuration"},{"location":"#example_1","text":"Suppose you have both vector(SVGs) and raster images in your project and you want to me classified separately so that you can use them with separate classes. You can use groups here. Keep your vector and raster images in separate folder and specify them in the config file. spider.yaml groups : - path : assets/images class_name : Images package : res - path : assets/vectors class_name : Svgs package : res Here, first item in the list indicates to group assets of assets/images folder under class named Images and the second one indicates to group assets of assets/vectors directory under class named Svgs . So when you refer to Images class, auto-complete suggests raster images only and you know that you can use them with AssetImage and other one with vector rendering library.","title":"Example"},{"location":"#multi-path-configuration","text":"From Spider v0.4.0 , multiple paths can be specified for a single group to collect references from multiple directories and generate all the references under single dart class.","title":"Multi-path configuration"},{"location":"#example_2","text":"groups : - paths : - assets/images - assets/more_images/ class_name : Images package : res types : [ .png , .jpg , .jpeg , .webp , .webm , .bmp ] By using paths , multiple source directories can be specified. Above example will generate references from assets/images and assets/more_images/ under a single dart class named Images .","title":"Example"},{"location":"#generating-tests","text":"Spider v0.4.0 adds support for generating test cases for generated dart references to make sure that the asset file is present in the project. These tests can also be run on CI servers. To enable tests generation, specify generate_tests flag in spider.yaml or spider.json configuration file as shown below. generate_tests : true This flag will indicate spider to generate tests for all the generated dart references.","title":"Generating Tests"},{"location":"#enable-verbose-logging","text":"Spider prefers not to overwhelm terminal with verbose logs that are redundant for most of the cases. However those verbose logs come quite handy when it comes to debug anything. You can enable verbose logging by using --verbose option on build command. spider build --verbose # watching directories with verbose logs spider build --watch --verbose","title":"Enable Verbose Logging"},{"location":"#liked-spider","text":"Show some love and support by starring the repository. Or You can","title":"Liked spider?"},{"location":"#license","text":"Copyright \u00a9 2020 Birju Vachhani Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"installation/","text":"Install Tool \u00b6 This is package is an independent library that is not linked to your project. So there's no need to add it to your flutter project as it works as a global command line tool for all of your projects. pub global activate spider Run following command to see help: spider --help Usage \u00b6 Create Configuration File \u00b6 Spider provides a very easy and straight forward way to create a configuration file. Execute following command and it will create a configuration file with default configurations in it. spider create Now you can modify available configurations and Spider will use those configs when generating dart code. Use JSON config file \u00b6 Though above command creates YAML format for config file, spider also supports JSON format for config file. Use this command to create JSON config file instead of YAML . spider create --json No matter which config format you use, JSON or YAML , spider automatically detects it and uses it for code generation. Here's the default configuration that will be in the config file: # Generated by Spider # Generates unit tests to verify that the assets exists in assets directory generate_tests : true # Use this to remove vcs noise created by the `generated` comments in dart code no_comments : true # Exports all the generated file as the one library export : true # This allows you to import all the generated references with 1 single import! use_part_of : true # Location where all the generated references will be stored package : resources groups : - path : assets/images class_name : Images types : [ .png , .jpg , .jpeg , .webp , .webm , .bmp ] Generate Code \u00b6 Run following command to generate dart code: spider build checkout manual for more information on available configurations.","title":"Installation"},{"location":"installation/#install-tool","text":"This is package is an independent library that is not linked to your project. So there's no need to add it to your flutter project as it works as a global command line tool for all of your projects. pub global activate spider Run following command to see help: spider --help","title":"Install Tool"},{"location":"installation/#usage","text":"","title":"Usage"},{"location":"installation/#create-configuration-file","text":"Spider provides a very easy and straight forward way to create a configuration file. Execute following command and it will create a configuration file with default configurations in it. spider create Now you can modify available configurations and Spider will use those configs when generating dart code.","title":"Create Configuration File"},{"location":"installation/#use-json-config-file","text":"Though above command creates YAML format for config file, spider also supports JSON format for config file. Use this command to create JSON config file instead of YAML . spider create --json No matter which config format you use, JSON or YAML , spider automatically detects it and uses it for code generation. Here's the default configuration that will be in the config file: # Generated by Spider # Generates unit tests to verify that the assets exists in assets directory generate_tests : true # Use this to remove vcs noise created by the `generated` comments in dart code no_comments : true # Exports all the generated file as the one library export : true # This allows you to import all the generated references with 1 single import! use_part_of : true # Location where all the generated references will be stored package : resources groups : - path : assets/images class_name : Images types : [ .png , .jpg , .jpeg , .webp , .webm , .bmp ]","title":"Use JSON config file"},{"location":"installation/#generate-code","text":"Run following command to generate dart code: spider build checkout manual for more information on available configurations.","title":"Generate Code"},{"location":"manual/","text":"Manual \u00b6 Note: This is a table! If it looks like some verbose logs rather than looking like a table, then head over to the repository to make it look like a table. KEY TYPE DEFAULT VALUE SCOPE DESCRIPTION path/paths * String None GROUP Where to locate assets? class_name * String None GROUP What will be the name of generated dart class? package String resources GLOBAL Where to generate dart code in the lib folder? file_name String {class_name} GROUP What will be the name of the generated dart file? prefix String None GROUP What will be the prefix of generated dart references? types List All GROUP Which types of assets should be included? generate_test bool false GLOBAL Generate test cases to make sure that asssets are still present inthe project? no_comments bool false GLOBAL Removes all the generated comments from top of all generated dart code.Use this to avoid vcs noise. export bool true GLOBAL Generates a dart file exporting all the generated classes. Can be used toavoid multiple exports. export_file String resources.dart GLOBAL What will be the name of generated export file? use_part_of bool false GLOBAL Allows to opt in for using part of instead of exporting generated dartfiles.","title":"Manual"},{"location":"manual/#manual","text":"Note: This is a table! If it looks like some verbose logs rather than looking like a table, then head over to the repository to make it look like a table. KEY TYPE DEFAULT VALUE SCOPE DESCRIPTION path/paths * String None GROUP Where to locate assets? class_name * String None GROUP What will be the name of generated dart class? package String resources GLOBAL Where to generate dart code in the lib folder? file_name String {class_name} GROUP What will be the name of the generated dart file? prefix String None GROUP What will be the prefix of generated dart references? types List All GROUP Which types of assets should be included? generate_test bool false GLOBAL Generate test cases to make sure that asssets are still present inthe project? no_comments bool false GLOBAL Removes all the generated comments from top of all generated dart code.Use this to avoid vcs noise. export bool true GLOBAL Generates a dart file exporting all the generated classes. Can be used toavoid multiple exports. export_file String resources.dart GLOBAL What will be the name of generated export file? use_part_of bool false GLOBAL Allows to opt in for using part of instead of exporting generated dartfiles.","title":"Manual"}]}