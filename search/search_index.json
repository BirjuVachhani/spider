{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#spider","title":"Spider","text":"<p>A small dart command-line tool to generate Assets dart code from assets folder. It generates dart class with static const variables in it which can be used to reference the assets safely anywhere in the flutter app.</p> <p> </p>"},{"location":"#breaking-changes-since-v400","title":"Breaking Changes since v4.0.0:","text":"<ul> <li><code>--info</code> flag command is now <code>--about</code> command.</li> <li><code>--check-updates</code> flag command is now <code>--check-for-updates</code>.</li> </ul>"},{"location":"#what-it-does","title":"What it does?","text":"<p>Spider generates references for the local assets used in your project by creating dart referece classes which are safe and easy to use anywhere.</p> <p>Example</p> <p>Before</p> <pre><code>Widget build(BuildContext context) {\nreturn Image(image: AssetImage('assets/background.png'));\n}\n</code></pre> <p>After</p> <pre><code>Widget build(BuildContext context) {\nreturn Image(image: AssetImage(Assets.background));\n}\n</code></pre> <p>Generated Assets Class</p> <pre><code>class Assets {\nstatic const String background = 'assets/background.png';\n}\n</code></pre>"},{"location":"#why-spider","title":"Why Spider?","text":"<ul> <li>Lightening fast code generation.</li> <li>Safe access to assets. No more typos!</li> <li>IDE auto-complete support.</li> <li>No dependecy on the project.</li> <li>Easy to configure.</li> <li>Way more customizable.</li> <li>Supports tests generation.</li> <li>Less VCS noise.</li> <li>Import friendly (exportable as library).</li> <li>Well documented.</li> </ul> <p>Sounds interesting?</p> <p>Head over to Getting Started guide and try out the power of Spider.</p>"},{"location":"#liked-spider","title":"Liked spider?","text":"<p>Show some love and support by starring the repository.</p> <p>Or You can</p> <p></p>"},{"location":"#license","title":"License","text":"<pre><code>Copyright \u00a9 2020 Birju Vachhani\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"changelog/","title":"Change Log","text":""},{"location":"changelog/#420","title":"4.2.0","text":"<ul> <li>Add support for font family code-gen. Checkout docs for more info.</li> <li>Fix typo in <code>KEY_IGNORED_RULES</code>.</li> <li>Implement fonts code generation based on fonts declaration in <code>pubspec.yaml</code> file.</li> <li>Fix duplicated success logs.</li> <li>Upgrade dependencies.</li> <li>Add documentation links in default config templates.</li> </ul>"},{"location":"changelog/#410","title":"4.1.0","text":"<ul> <li>Adds support for code generation on bundled package assets. Contributed by @Aqluse</li> <li>Upgraded dependencies.</li> </ul>"},{"location":"changelog/#400","title":"4.0.0","text":"<ul> <li>Structural rewrite of the internal workings of the library that utilizes <code>CommandRunner</code>, <code>Command</code> and <code>FlagCommand</code>   classes for better overall structure.</li> <li>Renamed <code>info</code> command to <code>about</code>.</li> <li>Refactored <code>check-updates</code> flag to <code>check-for-updates</code>.</li> <li>Added <code>--license</code> flag command.</li> <li>Added <code>--docs</code> flag command.</li> <li><code>create</code> command no longer checks for current directory to be a Flutter project.</li> <li>Fixes existing config detection for <code>--add-in-pubspec</code> flag in <code>create</code> command.</li> <li>Fixes stacktrace logging on error or exception.</li> <li>Color-codes success and error messages for better visual differentiation.</li> </ul>"},{"location":"changelog/#320","title":"3.2.0","text":"<ul> <li>Fixes pubspec config detection.</li> <li>Fixes watch flag abbr parsing.</li> <li>Introduces <code>ignored_rules</code> feature which allows to specify ignore rules for generated files.</li> <li>Introduces <code>sub_groups</code> feature.</li> </ul>"},{"location":"changelog/#310","title":"3.1.0","text":"<ul> <li>Use <code>flutter_test</code> imports when generating tests for flutter project.</li> </ul>"},{"location":"changelog/#300","title":"3.0.0","text":"<ul> <li>Fix flag abbr not working for some commands.</li> <li>Add support for creating configs in <code>pubspec.yaml</code> file.</li> <li>Add support for creating config file at custom directory path.</li> <li>Add support for specifying custom config file path when running <code>build</code> command.</li> <li>Build command now displays which config file is being used if there's more than one config file.</li> <li>Document new capabilities and commands.</li> </ul>"},{"location":"changelog/#222","title":"2.2.2","text":"<ul> <li>PR[#45] Sort generated file maps by file basenames by @WSydnA</li> </ul>"},{"location":"changelog/#221","title":"2.2.1","text":"<ul> <li>PR[#41]: values is not formatted in camel case if asset is written in snake case</li> </ul>"},{"location":"changelog/#220","title":"2.2.0","text":"<ul> <li>[#38]: Add option to generate values list just like enums.</li> </ul>"},{"location":"changelog/#210","title":"2.1.0","text":"<ul> <li>Uses official lints package for static analysis.</li> <li>Added more code comments.</li> <li>Fix lint warnings.</li> <li>Fix #35 Constants names have no prefixes.</li> <li>Add option to use underscores in reference names.</li> </ul>"},{"location":"changelog/#200","title":"2.0.0","text":"<ul> <li>Migrated to null safety</li> </ul>"},{"location":"changelog/#111","title":"1.1.1","text":"<ul> <li>Fixed part of directive for generated classes.</li> </ul>"},{"location":"changelog/#110","title":"1.1.0","text":"<ul> <li>Added private constructor for generated classes to restrict instantiation</li> <li>Format fixes</li> <li>Upgraded dependencies</li> </ul>"},{"location":"changelog/#101","title":"1.0.1","text":"<ul> <li>fix dart format warnings</li> <li>update dependencies</li> </ul>"},{"location":"changelog/#100","title":"1.0.0","text":"<ul> <li> <p>Added support for exporting generated dart code which is enabled by default This can be helpful in cases where you want to use a single file to import all of the generated classes. (Accessible individual classes when importing)</p> </li> <li> <p>Added support to use opt in for usage of <code>part of</code> feature of dart. It allows to avoid false imports when using export option. It makes all the generated dart code files to behave like one file and one import.</p> </li> <li>Added support to remove <code>Generated by spider...</code> comment line from all the generated dart code. Allows to minimize vcs noise.</li> <li><code>export_file</code> can be used to provide name of the export file.</li> </ul>"},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Instead of providing <code>package</code> to every group, now you have to define global <code>package</code> name as it makes more sense. Providing package name for individual groups won't work.</li> </ul>"},{"location":"changelog/#050","title":"0.5.0","text":"<ul> <li>Added support for <code>check updates</code></li> <li>Updated help manuals</li> <li>Updated example configs files</li> <li>Fixed verbose logs</li> </ul>"},{"location":"changelog/#041","title":"0.4.1","text":"<p>l\u0325 - Fix build command failing when there's no test generation specified - Fix embedded version - Added test to make sure that release version and embedded version matches</p>"},{"location":"changelog/#040","title":"0.4.0","text":"<ul> <li>Spider now allows to specify multiple paths to generate dart references under a single class.</li> <li>Spider now generates test cases for dart references to make sure that the file is present in the project.</li> </ul>"},{"location":"changelog/#036","title":"0.3.6","text":"<ul> <li>Fixed issue of creating references for files like <code>.DS_Store</code></li> <li>Now Spider shows error if you try to create a group with flutter specific assets directories like <code>2.0x</code> and <code>3.0x</code>.</li> </ul>"},{"location":"changelog/#035","title":"0.3.5","text":"<ul> <li>fixes common commands execution issue. Now you can execute command anywhere you like.</li> </ul>"},{"location":"changelog/#034","title":"0.3.4","text":"<ul> <li>Fix build command when there are sub-directories in assets directories</li> </ul>"},{"location":"changelog/#033","title":"0.3.3","text":"<ul> <li>Added smart watch feature.</li> <li>use <code>--smart-watch</code> option when running build command to enable it.</li> </ul>"},{"location":"changelog/#032","title":"0.3.2","text":"<ul> <li>Fix create command</li> </ul>"},{"location":"changelog/#031","title":"0.3.1","text":"<ul> <li>Fix version command.</li> <li>Formatted outputs and added more verbose logs.</li> <li>Added config validation before processing assets.</li> </ul>"},{"location":"changelog/#030","title":"0.3.0","text":"<ul> <li>Add support for categorization by file types.</li> <li>Add support for using prefixes for generated dart references.</li> </ul>"},{"location":"changelog/#021","title":"0.2.1","text":"<ul> <li>Add support for JSON format for config files</li> <li>Add flag <code>--json</code> to <code>create</code> command to create json config file.</li> <li>Update readme to add json option for config file.</li> </ul>"},{"location":"changelog/#020","title":"0.2.0","text":"<ul> <li>Add support for multiple assets directories</li> <li>Add support for separate class generation</li> <li>Uses sample config file config creation</li> </ul>"},{"location":"changelog/#013","title":"0.1.3","text":"<ul> <li>Add support for watching directories for file changes</li> <li>Rename <code>init</code> command to <code>create</code> command</li> <li>Implemented verbose flag for build command</li> <li>add <code>build</code> command</li> </ul>"},{"location":"changelog/#012","title":"0.1.2","text":"<ul> <li>add emojis for console logs</li> </ul>"},{"location":"changelog/#011","title":"0.1.1","text":"<ul> <li>fix issues of pub.dev health report</li> <li>refactor code</li> </ul>"},{"location":"changelog/#010","title":"0.1.0","text":"<ul> <li>added dart class generator</li> <li>fix pub.dev warnings</li> <li>add code documentation</li> </ul>"},{"location":"changelog/#001","title":"0.0.1","text":"<ul> <li>pre-alpha release</li> <li>Initial version for demo purpose</li> <li>avoid using in production.</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or  advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic  address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a  professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at brvachhani@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"configure/","title":"Create Configuration","text":""},{"location":"configure/#default-configuration","title":"Default Configuration","text":"<p>Spider provides a very easy and straight forward way to create a configuration file. Execute following command and it will create a configuration file with default configurations in it.</p> <pre><code>spider create\n</code></pre> <p>Now you can modify available configurations and Spider will use those configs when generating dart code.</p>"},{"location":"configure/#use-json-config-file","title":"Use JSON config file","text":"<p>Though above command creates <code>YAML</code> format for config file, spider also supports <code>JSON</code> format for config file. Use this command to create <code>JSON</code> config file instead of <code>YAML</code>.</p> <pre><code>spider create --json\n</code></pre> <p>No matter which config format you use, <code>JSON</code> or <code>YAML</code>, spider automatically detects it and uses it for code generation.</p>"},{"location":"configure/#generate-config-in-pubspecyaml","title":"Generate config in pubspec.yaml","text":"<p>Starting from version <code>3.0.0</code>, Spider now supports config generation inside pubspec.yaml</p> <pre><code>spider create --add-in-pubspec\n</code></pre> <p>Make sure that you don't already have spider config in your <code>pubspec.yaml</code> file. I won't be able to overwrite it.</p>"},{"location":"configure/#custom-path","title":"Custom Path","text":"<p>Starting from version <code>3.0.0</code>, Spider now supports config generation at custom path. Provide path to the directory you want to generate <code>spider.yaml</code> file in.</p> <pre><code>spider create -p ./configs\n</code></pre> <p>If you're using custom path for configuration file, then you have to point to it when using <code>spider build</code> command. See Generate Code guide on how to specify custom path for <code>build</code> command.</p> <p>Remember that the path must always be a directory. Not a file.</p>"},{"location":"configure/#config-file-precedence","title":"Config file precedence","text":"<p>If you have more than one config files, and you don't know which config file is being used by Spider, then this precedence order might help you figure that out! </p> <p>Spider looks for config file in following precedence order from top to bottom.</p> <p>Precedence</p> <ol> <li>Custom path (if provided with build command)</li> <li>From <code>pubspec.yaml</code></li> <li>From project root.</li> </ol>"},{"location":"configure/#default-configuration_1","title":"Default Configuration","text":"<p>Here's the default configuration that will be in the config file:</p> <pre><code># Generated by Spider\n\n# Generates unit tests to verify that the assets exists in assets directory\ngenerate_tests: true\n\n# Use this to remove vcs noise created by the `generated` comments in dart code\nno_comments: true\n\n# Exports all the generated file as the one library\nexport: true\n\n# This allows you to import all the generated references with 1 single import!\nuse_part_of: true\n\n# Location where all the generated references will be stored\npackage: resources\n\ngroups:\n- path: assets/images\nclass_name: Images\ntypes: [ .png, .jpg, .jpeg, .webp, .webm, .bmp ]\n</code></pre> <p>Now that the configuration file is created, it's time to generate some code.</p>"},{"location":"contribute/","title":"Contributing","text":"<p>We'd love for you to contribute to our source code and to make the project even better than it is today! Here are the guidelines we'd like you to follow:</p> <ul> <li>Code of Conduct</li> <li>Git Commit Messages</li> <li>Got a Question or Problem?</li> <li>Found an Issue?</li> </ul>"},{"location":"contribute/#git-commit-messages","title":"Git Commit Messages","text":"<ul> <li>Use the present tense (\"Add feature\" not \"Added feature\")</li> <li>Use the imperative mood (\"Move cursor to...\" not \"Moves cursor to...\")</li> <li>Limit the first line to 72 characters or less</li> <li>Reference issues and pull requests liberally after the first line</li> <li>When only changing documentation, include <code>[ci skip]</code> in the commit title</li> <li> <p>Consider starting the commit message with an applicable emoji:</p> <ul> <li> <code>:art:</code> when improving the format/structure of the code</li> <li> <code>:racehorse:</code> when improving performance</li> <li> <code>:non-potable_water:</code> when plugging memory leaks</li> <li> <code>:memo:</code> when writing docs</li> <li> <code>:bug:</code> when fixing a bug</li> <li> <code>:fire:</code> when removing code or files</li> <li> <code>:green_heart:</code> when fixing the CI build</li> <li> <code>:white_check_mark:</code> when adding tests</li> <li> <code>:lock:</code> when dealing with security</li> <li> <code>:arrow_up:</code> when upgrading dependencies</li> <li> <code>:arrow_down:</code> when downgrading dependencies</li> <li> <code>:shirt:</code> when removing lint/checkstyle warnings</li> </ul> <p>Find all the available emojis here. </p> </li> </ul>"},{"location":"contribute/#got-a-question-or-problem","title":"Got a Question or Problem?","text":"<p>If you feel that we're missing an important bit of documentation, feel free to file an issue so we can help. Here's an example to get you started:</p> <pre><code>What are you trying to do or find out more about?\n\nWhere have you looked?\n\nWhere did you expect to find this information?\n</code></pre>"},{"location":"contribute/#found-an-issue","title":"Found an Issue?","text":"<p>If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our project.</p> <p>To submit an issue, please check the Issue Template.</p> <p>Even better you can submit a Pull Request with a fix.</p>"},{"location":"contribute/#pull-request","title":"Pull Request","text":"<p>To generate a pull request, please consider following Pull Request Template.</p> <ul> <li>Search GitHub for an open or closed Pull Request   that relates to your submission. You don't want to duplicate effort.</li> <li>Please have a look at License before sending pull   requests. We cannot accept code without this.</li> </ul> <p>That's it! Thank you for your contribution!</p>"},{"location":"donate/","title":"Donate","text":"<p>The aim of this tool is to help developers develop flutter apps faster with less typical errors while using assets and resources. A lot of effort has been put into building this. So if this helped you and you're feeling generous and want to help, donations are always welcomed.</p> <p>Show some love and support by</p> <ul> <li> <p>Starring the repository.</p> </li> <li> <p>Liking the package on pub.dev</p> </li> </ul> <p>Or You can</p> <p></p>"},{"location":"extras/","title":"Extras","text":""},{"location":"extras/#how-to-check-for-updates","title":"How to check for updates","text":"<p>Run this command to check for any new updates. If a new version is available on pub.dev then it will be shown.</p> <pre><code>spider --check-for-updates\n</code></pre>"},{"location":"extras/#how-to-see-tool-license","title":"How to see tool license","text":"<p>This command prints the license of this tool. See full license here.</p> <pre><code>spider --license\n</code></pre>"},{"location":"extras/#about","title":"About","text":"<p>This command prints tool information such as current version, author, etc.</p> <pre><code>spider --about\n</code></pre>"},{"location":"extras/#how-to-open-docs","title":"How to open docs","text":"<p>This command will open this documentation in your browser.</p> <pre><code>spider --docs\n</code></pre>"},{"location":"fonts/","title":"Generate for Fonts","text":"<p>This feature is introduced in Spider v4.2.0</p> <p>Spider now supports code generation for fonts specified in <code>pubspec.yaml</code>. It will generate a class with font family names as <code>const</code> strings.</p> <p><pre><code># global config\nfonts: true\n</code></pre> This generates font family names in <code>FontFamily</code> class in <code>fonts.dart</code> file.</p> <p>If you want to change it, you can do so like this:</p> <pre><code># global config\n\nfonts:\nclass_name: MyFonts\nfile_name: custom_fonts\n</code></pre> <p>After this, just run <code>spider build</code> command and it will generate code for font families.</p>"},{"location":"fonts/#example-output","title":"Example output","text":"<pre><code>class FontFamily {\nFontFamily._();\n\nstatic const String roboto = 'Roboto';\nstatic const String openSans = 'Open Sans';\n}\n</code></pre> <p>Specify <code>--fonts-only</code> flag to your build command to generate/re-generate only fonts.</p> <pre><code>spider build --fonts-only\n</code></pre>"},{"location":"generate/","title":"Generate Code","text":""},{"location":"generate/#build-command","title":"Build Command","text":"<p>Now that the configuration file is created, all that left is to run generator. Run following command to generate dart code:</p> <pre><code>spider build\n</code></pre> <p>This will analyze all the asset directories specified in the configuration file and will generate dart references.</p>"},{"location":"generate/#custom-configuration-path","title":"Custom configuration path","text":"<p>If you're using custom path for configuration file (e.g. if it is not in the root directory or in <code>pubspec.yaml</code> file), then you have point to it in the build command like this:</p> <pre><code>spider -p ./configs/spider.yaml build\n</code></pre>"},{"location":"generate/#example-output","title":"Example Output","text":"<pre><code>class Assets {\nstatic const String icCamera = 'assets/camera.png';\nstatic const String icLocation = 'assets/location.png';\n}\n</code></pre> <p>checkout manual for more information on available configurations.</p>"},{"location":"grouping/","title":"Grouping","text":"<p>Spider provides supports for multiple configurations and classifications. If you wanna group your assets by module, type or anything, you can do that using <code>groups</code> in spider.</p> <p>Example</p> <p>Suppose you have both vector(SVGs) and raster images in your project and you want to me classified separately so that you can use them with separate classes. You can use groups here. Keep your vector and raster images in separate folder and specify them in the config file.</p> <p><code>spider.yaml</code> <pre><code>groups:\n- path: assets/images\nclass_name: Images\npackage: res\n- path: assets/vectors\nclass_name: Svgs\npackage: res\n</code></pre></p> <p>Here, first item in the list indicates to group assets of <code>assets/images</code> folder under class named <code>Images</code> and the second one indicates to group assets of <code>assets/vectors</code> directory under class named <code>Svgs</code>.</p> <p>So when you refer to <code>Images</code> class, auto-complete suggests raster images only and you know that you can use them with <code>AssetImage</code> and other one with vector rendering library.</p>"},{"location":"grouping/#categorizing-by-file-extension","title":"Categorizing by File Extension","text":"<p>By default, Spider allows any file to be referenced in the dart code. but you can change that behavior. You can specify which files you want to be referenced.</p> <pre><code>path: assets\nclass_name: Assets\npackage: res\ntypes: [ jpg, png, jpeg, webp, bmp, gif ]\n</code></pre>"},{"location":"grouping/#sub-grouping","title":"Sub grouping","text":"<p>Starting from <code>v3.2.0</code>, you can specify sub groups for a group if you ever want to use different prefixes for different types.</p> <pre><code>groups:\n- class_name: Images\nsub_groups:\n- path: assets/images\nprefix: png\ntypes: [ .png ]\n- path: assets/vectors\nprefix: svg\ntypes: [ .svg ]\n</code></pre> <p>This configuration will add <code>png</code> prefix for the generated references if it is a PNG image file and <code>jpg</code> prefix if it is a JPG or JPEG image file. Notice that instead of specifying <code>path</code> in the group, we specified it directly to the sub-group.</p> <p></p>"},{"location":"ignore-rules/","title":"Lint Rules","text":"<p>This feature is introduced in Spider v3.2.0</p> <p>Spider allows you to specify ignore rules for the generated dart files so that your linter won't complain about certains rules it can't follow. e.g. public_member_api_docs or avoid_classes_with_only_static_members.</p> <p>Spider will add <code>//ignore_for_file</code> lint suppression to all the generated dart files. You can use <code>ignored_rules</code> global config to specify list of rules that should be ignored for the generated code.</p> <p>spider.yaml</p> <pre><code>ignored_rules:\n- public_member_api_docs\n- avoid_classes_with_only_static_members\n</code></pre> <p>Generated Code:</p> <p><pre><code>// ignore_for_file: public_member_api_docs, avoid_classes_with_only_static_members\n\nclass Images {\nImages._();\n\nstatic const String image1 = 'assets/images/image1.png';\nstatic const String image2 = 'assets/images/image2.png';\n}\n</code></pre> </p>"},{"location":"installation/","title":"Installation","text":"<p>This package is an independent tool that is not linked to your project. So there's no need to add it to your flutter project as it works as a global command line tool for all of your projects.</p> <p>This tool can be installed via pub. Execute following command to install it globally.</p> <pre><code>pub global activate spider\n</code></pre> <p>Run following command to see help:</p> <pre><code>spider --help\n</code></pre>"},{"location":"installation/#install-via-homebrew","title":"Install via Homebrew","text":"<p>Spider has its own tap that can be used to install it via Homebrew.</p> <pre><code>brew tap birjuvachhani/spider\nbrew install spider\n</code></pre> <p></p>"},{"location":"license/","title":"License","text":""},{"location":"license/#apache-20","title":"Apache 2.0","text":"<p>Copyright \u00a9 2020 Birju Vachhani</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <pre><code>http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p> <p>See full license here.</p>"},{"location":"manual/","title":"Manual","text":"<p>Below table contains all the configuration options that Spider offers.</p> <p>Note: This is a table! If it doesn't look like one then head over to the repository.</p> KEY TYPE DEFAULT VALUE SCOPE DESCRIPTION <code>path/paths</code>* String None GROUP Where to locate assets? <code>class_name</code>* String None GROUP What will be the name of generated dart class? <code>package</code> String <code>resources</code> GLOBAL Where to generate dart code in the lib folder? <code>file_name</code> String {class_name} GROUP What will be the name of the generated dart file? <code>prefix</code> String None GROUP What will be the prefix of generated dart references? <code>use_underscores</code> bool <code>false</code> GROUP User underscore instead of camelcase for dart references? <code>types</code> List All GROUP Which types of assets should be included? <code>generate_test</code> bool <code>false</code> GLOBAL Generate test cases to make sure that asssets are still present inthe project? <code>no_comments</code> bool <code>false</code> GLOBAL Removes all the <code>generated</code> comments from top of all generated dart code.Use this to avoid vcs noise. <code>export</code> bool <code>true</code> GLOBAL Generates a dart file exporting all the generated classes. Can be used toavoid multiple exports. <code>export_file</code> String <code>resources.dart</code> GLOBAL What will be the name of generated export file? <code>use_part_of</code> bool <code>false</code> GLOBAL Allows to opt in for using <code>part of</code> instead of exporting generated dartfiles. <code>use_references_list</code> bool <code>false</code> GLOBAL Generates value list just like enums which contains all the asset references of that class. <code>ignored_rules</code> List None GLOBAL Generates <code>//ignore_for_file</code> lint suppression for dart files. <code>fonts</code> bool/map <code>false</code> GLOBAL Generates code for fonts specified in pubspec.yaml. <p></p>"},{"location":"multi-path/","title":"Using Multi path","text":"<p>From Spider <code>v0.4.0</code>, multiple paths can be specified for a single group to collect references from multiple directories and generate all the references under single dart class.</p> <p>Example</p> <pre><code>groups:\n- paths:\n- assets/images\n- assets/more_images/\nclass_name: Images\npackage: res\ntypes: [ .png, .jpg, .jpeg, .webp, .webm, .bmp ]\n</code></pre> <p>By using <code>paths</code>, multiple source directories can be specified. Above example will generate references from <code>assets/images</code> and <code>assets/more_images/</code> under a single dart class named <code>Images</code>.</p>"},{"location":"package-assets-usage/","title":"Using bundled package assets","text":"<p>This feature is introduced in Spider v4.1.0</p> <p>If the package you're using is bundling its package assets (You can read more about it on offical Flutter docs here.) and has exposed generated dart references for bundled package assets, then you can use them in your application too.</p>"},{"location":"package-assets-usage/#important","title":"IMPORTANT:","text":"<p>It is a hard requirement from Flutter that you must specify each and every asset path individually in the assets section of your application's <code>pubspec.yaml</code>. Otherwise AssetBundle won't be able to find the package assets. So specifying <code>packages/&lt;package_name&gt;/images/</code> doesn't work.</p> <p>This is how you have to specify assets in your application's <code>pubspec.yaml</code> file.</p> <pre><code>flutter:\nassets:\n- packages/&lt;package_name&gt;/images/image1.png\n- packages/&lt;package_name&gt;/images/image2.png\n- packages/&lt;package_name&gt;/images/image3.png\n- packages/&lt;package_name&gt;/images/image4.png\n- packages/&lt;package_name&gt;/images/image5.png\n</code></pre> <p>Once you have this configuration in your application, You can use those package references just like how you use your own asset references.</p> <p>for example,</p> <pre><code>Image.asset(PackageImages.image1);\n</code></pre> <p>Keep in mind that, for this to work, the package itself has to include dart references for the assets put inside <code>lib</code> of the package.</p>"},{"location":"package-assets/","title":"Bundling of package assets","text":"<p>This feature is introduced in Spider v4.1.0</p> <p>Flutter supports bundling of package assets which allows you to expose assets put into <code>lib</code> forlder of your package. You can read more about it on offical Flutter docs here.</p> <p>Spider now supports assets generation for this specific scenario. If you are a package/library developer and you're including assets in your <code>lib</code> folder that you may want user to access properly, Generating package compatible assets will help you do that. This will allow package authers to expose assets using generated dart references.</p> <p>For example, If you have your assets in your package like this:</p> <pre><code>lib/images\n\u251c\u2500\u2500 image1.png\n\u251c\u2500\u2500 image2.png\n\u251c\u2500\u2500 image3.png\n\u251c\u2500\u2500 image4.png\n\u2514\u2500\u2500 image5.png\n</code></pre> <p>then put this in your package's <code>spider.yaml</code> file configuration file:</p> <p><pre><code>groups:\n- path: packages/&lt;package_name&gt;/images\nclass_name: PackageImages\ntypes: [ .png, .jpg, .jpeg, .webp, .webm, .bmp ]\n</code></pre> Notice the <code>path</code> here is a special one that does all the magic.</p> <p>Running spider build command would generate this:</p> <pre><code>lib/resources\n\u251c\u2500\u2500 package_images.dart\n\u2514\u2500\u2500 resources.dart\n</code></pre> <pre><code>part of 'resources.dart';\n\nclass PackageImages {\nPackageImages._();\n\nstatic const String image1 = 'packages/&lt;package_name&gt;/images/image1.png';\nstatic const String image2 = 'packages/&lt;package_name&gt;/images/image2.png';\nstatic const String image3 = 'packages/&lt;package_name&gt;/images/image3.png';\nstatic const String image4 = 'packages/&lt;package_name&gt;/images/image4.png';\nstatic const String image5 = 'packages/&lt;package_name&gt;/images/image5.png';\n}\n</code></pre>"},{"location":"package-assets/#important","title":"IMPORTANT:","text":"<p>It is a hard requirement from Flutter that you mention each and every assets individually in your application's pubspec.yaml file.</p>"},{"location":"prefixes/","title":"Using Prefixes","text":"<p>You can use prefixes for names of the generated dart references. Prefixes will be attached to the formatted reference names.</p> <pre><code>path: assets\nclass_name: Assets\npackage: res\nprefix: ic\n</code></pre> <p>Output</p> <pre><code>class Assets {\nstatic const String icCamera = 'assets/camera.png';\nstatic const String icLocation = 'assets/location.png';\n}\n</code></pre>"},{"location":"test/","title":"Debug & Testing","text":""},{"location":"test/#generating-tests","title":"Generating Tests","text":"<p>This feature is introduced in Spider v0.4.0</p> <p>Spider supports for generating test cases for generated dart references to make sure that the asset file is present in the project. These tests can also be run on CI servers. To enable tests generation, specify <code>generate_tests</code> flag in <code>spider.yaml</code> or <code>spider.json</code> configuration file as shown below.</p> <p><pre><code>generate_tests: true\n</code></pre> This flag will indicate spider to generate tests for all the generated dart references.</p>"},{"location":"test/#enable-verbose-logging","title":"Enable Verbose Logging","text":"<p>Spider prefers not to overwhelm terminal with verbose logs that are redundant for most of the cases. However those verbose logs come quite handy when it comes to debug anything. You can enable verbose logging by using <code>--verbose</code> option on build command.</p> <p><pre><code>spider build --verbose\n\n# watching directories with verbose logs\nspider build --watch --verbose\n</code></pre> </p>"},{"location":"values/","title":"Generate `values` list","text":"<p>Familiar with <code>Enum.values</code> list which contains all the enum values? Spider also provides support for generating <code>values</code> list for all the asset references in given dart class. Use <code>use_references_list</code> global config to enable <code>values</code> list generation.</p> <pre><code># global config\nuse_references_list: true\n</code></pre> <p>This is disabled by default as it can be overwhelming to have this code-gen if you don't need it.</p>"},{"location":"watching-directories/","title":"Watching Directories","text":""},{"location":"watching-directories/#auto-build","title":"Auto Build","text":"<p>Spider can also watch given directory for changes in files and rebuild dart code automatically. Use following command to watch for changes:</p> <pre><code>spider build --watch\n</code></pre> <p>see help for more information: <pre><code>spider build --help\n</code></pre></p>"},{"location":"watching-directories/#smart-watch-experimental","title":"Smart Watch (Experimental)","text":"<p>The normal <code>--watch</code> option watches for any kind of changes that happens in the directory. However this can be improved my smartly watching the directory. It includes ignoring events that doesn't affect anything like file content changes. Also, it only watches allowed file types and rebuilds upon changes for those files only.</p> <p>Run following command to watch directories smartly.</p> <p><pre><code>spider build --smart-watch\n</code></pre> </p>"}]}