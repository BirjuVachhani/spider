{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Spider \u00b6 A small dart command-line tool to generate Assets dart code from assets folder. It generates dart class with static const variables in it which can be used to reference the assets safely anywhere in the flutter app. Breaking Changes since v1.0.0: \u00b6 Instead of declaring package name separately for each group, spider now takes package key-value pair as a global configuration. What it does? \u00b6 Spider generates references for the local assets used in your project by creating dart referece classes which are safe and easy to use anywhere. Example Before Widget build ( BuildContext context ) { return Image ( image: AssetImage ( 'assets/background.png' )); } After Widget build ( BuildContext context ) { return Image ( image: AssetImage ( Assets . background )); } Generated Assets Class class Assets { static const String background = 'assets/background.png' ; } Why Spider? \u00b6 Lightening fast code generation. Safe access to assets. No more typos! IDE auto-complete support. No dependecy on the project. Easy to configure. Way more customizable. Supports tests generation. Less VCS noise. Import friendly (exportable as library). Well documented. Sounds interesting? Head over to Getting Started guide and try out the power of Spider. Liked spider? \u00b6 Show some love and support by starring the repository . Or You can License \u00b6 Copyright \u00a9 2020 Birju Vachhani Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Home"},{"location":"#spider","text":"A small dart command-line tool to generate Assets dart code from assets folder. It generates dart class with static const variables in it which can be used to reference the assets safely anywhere in the flutter app.","title":"Spider"},{"location":"#breaking-changes-since-v100","text":"Instead of declaring package name separately for each group, spider now takes package key-value pair as a global configuration.","title":"Breaking Changes since v1.0.0:"},{"location":"#what-it-does","text":"Spider generates references for the local assets used in your project by creating dart referece classes which are safe and easy to use anywhere. Example Before Widget build ( BuildContext context ) { return Image ( image: AssetImage ( 'assets/background.png' )); } After Widget build ( BuildContext context ) { return Image ( image: AssetImage ( Assets . background )); } Generated Assets Class class Assets { static const String background = 'assets/background.png' ; }","title":"What it does?"},{"location":"#why-spider","text":"Lightening fast code generation. Safe access to assets. No more typos! IDE auto-complete support. No dependecy on the project. Easy to configure. Way more customizable. Supports tests generation. Less VCS noise. Import friendly (exportable as library). Well documented. Sounds interesting? Head over to Getting Started guide and try out the power of Spider.","title":"Why Spider?"},{"location":"#liked-spider","text":"Show some love and support by starring the repository . Or You can","title":"Liked spider?"},{"location":"#license","text":"Copyright \u00a9 2020 Birju Vachhani Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at brvachhani@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at brvachhani@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"configure/","text":"Default Configuration \u00b6 Spider provides a very easy and straight forward way to create a configuration file. Execute following command and it will create a configuration file with default configurations in it. spider create Now you can modify available configurations and Spider will use those configs when generating dart code. Use JSON config file \u00b6 Though above command creates YAML format for config file, spider also supports JSON format for config file. Use this command to create JSON config file instead of YAML . spider create --json No matter which config format you use, JSON or YAML , spider automatically detects it and uses it for code generation. Here's the default configuration that will be in the config file: # Generated by Spider # Generates unit tests to verify that the assets exists in assets directory generate_tests : true # Use this to remove vcs noise created by the `generated` comments in dart code no_comments : true # Exports all the generated file as the one library export : true # This allows you to import all the generated references with 1 single import! use_part_of : true # Location where all the generated references will be stored package : resources groups : - path : assets/images class_name : Images types : [ .png , .jpg , .jpeg , .webp , .webm , .bmp ] Now that the configuration file is created, it's time to generate some code .","title":"Create Configuration"},{"location":"configure/#default-configuration","text":"Spider provides a very easy and straight forward way to create a configuration file. Execute following command and it will create a configuration file with default configurations in it. spider create Now you can modify available configurations and Spider will use those configs when generating dart code.","title":"Default Configuration"},{"location":"configure/#use-json-config-file","text":"Though above command creates YAML format for config file, spider also supports JSON format for config file. Use this command to create JSON config file instead of YAML . spider create --json No matter which config format you use, JSON or YAML , spider automatically detects it and uses it for code generation. Here's the default configuration that will be in the config file: # Generated by Spider # Generates unit tests to verify that the assets exists in assets directory generate_tests : true # Use this to remove vcs noise created by the `generated` comments in dart code no_comments : true # Exports all the generated file as the one library export : true # This allows you to import all the generated references with 1 single import! use_part_of : true # Location where all the generated references will be stored package : resources groups : - path : assets/images class_name : Images types : [ .png , .jpg , .jpeg , .webp , .webm , .bmp ] Now that the configuration file is created, it's time to generate some code .","title":"Use JSON config file"},{"location":"contribute/","text":"Contributing \u00b6 We'd love for you to contribute to our source code and to make the project even better than it is today! Here are the guidelines we'd like you to follow: Code of Conduct Git Commit Messages Got a Question or Problem? Found an Issue? Git Commit Messages \u00b6 Use the present tense (\"Add feature\" not \"Added feature\") Use the imperative mood (\"Move cursor to...\" not \"Moves cursor to...\") Limit the first line to 72 characters or less Reference issues and pull requests liberally after the first line When only changing documentation, include [ci skip] in the commit title Consider starting the commit message with an applicable emoji: :art: when improving the format/structure of the code :racehorse: when improving performance :non-potable_water: when plugging memory leaks :memo: when writing docs :bug: when fixing a bug :fire: when removing code or files :green_heart: when fixing the CI build :white_check_mark: when adding tests :lock: when dealing with security :arrow_up: when upgrading dependencies :arrow_down: when downgrading dependencies :shirt: when removing lint/checkstyle warnings Find all the available emojis here . Got a Question or Problem? \u00b6 If you feel that we're missing an important bit of documentation, feel free to file an issue so we can help. Here's an example to get you started: What are you trying to do or find out more about? Where have you looked? Where did you expect to find this information? Found an Issue? \u00b6 If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our project. To submit an issue, please check the Issue Template . Even better you can submit a Pull Request with a fix. Pull Request \u00b6 To generate a pull request, please consider following Pull Request Template . Search GitHub for an open or closed Pull Request that relates to your submission. You don't want to duplicate effort. Please have a look at License before sending pull requests. We cannot accept code without this. That's it! Thank you for your contribution!","title":"Contributing"},{"location":"contribute/#contributing","text":"We'd love for you to contribute to our source code and to make the project even better than it is today! Here are the guidelines we'd like you to follow: Code of Conduct Git Commit Messages Got a Question or Problem? Found an Issue?","title":"Contributing"},{"location":"contribute/#git-commit-messages","text":"Use the present tense (\"Add feature\" not \"Added feature\") Use the imperative mood (\"Move cursor to...\" not \"Moves cursor to...\") Limit the first line to 72 characters or less Reference issues and pull requests liberally after the first line When only changing documentation, include [ci skip] in the commit title Consider starting the commit message with an applicable emoji: :art: when improving the format/structure of the code :racehorse: when improving performance :non-potable_water: when plugging memory leaks :memo: when writing docs :bug: when fixing a bug :fire: when removing code or files :green_heart: when fixing the CI build :white_check_mark: when adding tests :lock: when dealing with security :arrow_up: when upgrading dependencies :arrow_down: when downgrading dependencies :shirt: when removing lint/checkstyle warnings Find all the available emojis here .","title":" Git Commit Messages"},{"location":"contribute/#got-a-question-or-problem","text":"If you feel that we're missing an important bit of documentation, feel free to file an issue so we can help. Here's an example to get you started: What are you trying to do or find out more about? Where have you looked? Where did you expect to find this information?","title":" Got a Question or Problem?"},{"location":"contribute/#found-an-issue","text":"If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our project. To submit an issue, please check the Issue Template . Even better you can submit a Pull Request with a fix.","title":" Found an Issue?"},{"location":"contribute/#pull-request","text":"To generate a pull request, please consider following Pull Request Template . Search GitHub for an open or closed Pull Request that relates to your submission. You don't want to duplicate effort. Please have a look at License before sending pull requests. We cannot accept code without this. That's it! Thank you for your contribution!","title":"Pull Request"},{"location":"donate/","text":"The aim of this tool is to help developers develop flutter apps faster with less typical errors while using assets and resources. A lot of effort has been put into building this. So if this helped you and you're feeling generous and want to help, donations are always welcomed. Show some love and support by Starring the repository . Liking the package on pub.dev Or You can","title":"Donate"},{"location":"generate/","text":"Now that the configuration file is created, all that left is to run generator. Run following command to generate dart code: spider build This will analyze all the asset directories specified in the configuration file and will generate dart references. Example Output class Assets { static const String icCamera = 'assets/camera.png' ; static const String icLocation = 'assets/location.png' ; } checkout manual for more information on available configurations.","title":"Generate Code"},{"location":"grouping/","text":"Spider provides supports for multiple configurations and classifications. If you wanna group your assets by module, type or anything, you can do that using groups in spider. Example Suppose you have both vector(SVGs) and raster images in your project and you want to me classified separately so that you can use them with separate classes. You can use groups here. Keep your vector and raster images in separate folder and specify them in the config file. spider.yaml groups : - path : assets/images class_name : Images package : res - path : assets/vectors class_name : Svgs package : res Here, first item in the list indicates to group assets of assets/images folder under class named Images and the second one indicates to group assets of assets/vectors directory under class named Svgs . So when you refer to Images class, auto-complete suggests raster images only and you know that you can use them with AssetImage and other one with vector rendering library. Categorizing by File Extension \u00b6 By default, Spider allows any file to be referenced in the dart code. but you can change that behavior. You can specify which files you want to be referenced. path : assets class_name : Assets package : res types : [ jpg , png , jpeg , webp , bmp , gif ]","title":"Grouping"},{"location":"grouping/#categorizing-by-file-extension","text":"By default, Spider allows any file to be referenced in the dart code. but you can change that behavior. You can specify which files you want to be referenced. path : assets class_name : Assets package : res types : [ jpg , png , jpeg , webp , bmp , gif ]","title":"Categorizing by File Extension"},{"location":"installation/","text":"This package is an independent tool that is not linked to your project. So there's no need to add it to your flutter project as it works as a global command line tool for all of your projects. This tool can be installed via pub. Execute following command to install it globally. pub global activate spider Run following command to see help: spider --help Install via Homebrew \u00b6 Spider has its own tap that can be used to install it via Homebrew . brew tap birjuvachhani/spider https://github.com/birjuvachhani/spider brew install spider","title":"Installation"},{"location":"installation/#install-via-homebrew","text":"Spider has its own tap that can be used to install it via Homebrew . brew tap birjuvachhani/spider https://github.com/birjuvachhani/spider brew install spider","title":"Install via Homebrew"},{"location":"license/","text":"Apache 2.0 Copyright \u00a9 2020 Birju Vachhani Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. See full license here .","title":"License"},{"location":"manual/","text":"Below table contains all the configuration options that Spider offers. Note: This is a table! If it looks like some verbose logs rather than looking like a table, then head over to the repository to make it look like a table. KEY TYPE DEFAULT VALUE SCOPE DESCRIPTION path/paths * String None GROUP Where to locate assets? class_name * String None GROUP What will be the name of generated dart class? package String resources GLOBAL Where to generate dart code in the lib folder? file_name String {class_name} GROUP What will be the name of the generated dart file? prefix String None GROUP What will be the prefix of generated dart references? use_underscores bool false GROUP User underscore instead of camelcase for dart references? types List All GROUP Which types of assets should be included? generate_test bool false GLOBAL Generate test cases to make sure that asssets are still present inthe project? no_comments bool false GLOBAL Removes all the generated comments from top of all generated dart code.Use this to avoid vcs noise. export bool true GLOBAL Generates a dart file exporting all the generated classes. Can be used toavoid multiple exports. export_file String resources.dart GLOBAL What will be the name of generated export file? use_part_of bool false GLOBAL Allows to opt in for using part of instead of exporting generated dartfiles.","title":"Manual"},{"location":"multi_path/","text":"From Spider v0.4.0 , multiple paths can be specified for a single group to collect references from multiple directories and generate all the references under single dart class. Example groups : - paths : - assets/images - assets/more_images/ class_name : Images package : res types : [ .png , .jpg , .jpeg , .webp , .webm , .bmp ] By using paths , multiple source directories can be specified. Above example will generate references from assets/images and assets/more_images/ under a single dart class named Images .","title":"Using Multi path"},{"location":"prefixes/","text":"You can use prefixes for names of the generated dart references. Prefixes will be attached to the formatted reference names. path : assets class_name : Assets package : res prefix : ic Output class Assets { static const String icCamera = 'assets/camera.png' ; static const String icLocation = 'assets/location.png' ; }","title":"Using Prefixes"},{"location":"test/","text":"Generating Tests \u00b6 Spider v0.4.0 adds support for generating test cases for generated dart references to make sure that the asset file is present in the project. These tests can also be run on CI servers. To enable tests generation, specify generate_tests flag in spider.yaml or spider.json configuration file as shown below. generate_tests : true This flag will indicate spider to generate tests for all the generated dart references. Enable Verbose Logging \u00b6 Spider prefers not to overwhelm terminal with verbose logs that are redundant for most of the cases. However those verbose logs come quite handy when it comes to debug anything. You can enable verbose logging by using --verbose option on build command. spider build --verbose # watching directories with verbose logs spider build --watch --verbose","title":"Debug & Testing"},{"location":"test/#generating-tests","text":"Spider v0.4.0 adds support for generating test cases for generated dart references to make sure that the asset file is present in the project. These tests can also be run on CI servers. To enable tests generation, specify generate_tests flag in spider.yaml or spider.json configuration file as shown below. generate_tests : true This flag will indicate spider to generate tests for all the generated dart references.","title":"Generating Tests"},{"location":"test/#enable-verbose-logging","text":"Spider prefers not to overwhelm terminal with verbose logs that are redundant for most of the cases. However those verbose logs come quite handy when it comes to debug anything. You can enable verbose logging by using --verbose option on build command. spider build --verbose # watching directories with verbose logs spider build --watch --verbose","title":"Enable Verbose Logging"},{"location":"watching_dirs/","text":"Auto Build \u00b6 Spider can also watch given directory for changes in files and rebuild dart code automatically. Use following command to watch for changes: spider build --watch see help for more information: spider build --help Smart Watch (Experimental) \u00b6 The normal --watch option watches for any kind of changes that happens in the directory. However this can be improved my smartly watching the directory. It includes ignoring events that doesn't affect anything like file content changes. Also, it only watches allowed file types and rebuilds upon changes for those files only. Run following command to watch directories smartly. spider build --smart-watch","title":"Watching Directories"},{"location":"watching_dirs/#auto-build","text":"Spider can also watch given directory for changes in files and rebuild dart code automatically. Use following command to watch for changes: spider build --watch see help for more information: spider build --help","title":"Auto Build"},{"location":"watching_dirs/#smart-watch-experimental","text":"The normal --watch option watches for any kind of changes that happens in the directory. However this can be improved my smartly watching the directory. It includes ignoring events that doesn't affect anything like file content changes. Also, it only watches allowed file types and rebuilds upon changes for those files only. Run following command to watch directories smartly. spider build --smart-watch","title":"Smart Watch (Experimental)"}]}