/*
 * Copyright Â© 2020 Birju Vachhani
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Author: Birju Vachhani
// Created Date: February 03, 2020

import 'dart:io';

import 'package:path/path.dart' as path;
import 'package:spider/src/Formatter.dart';
import 'package:spider/src/asset_group.dart';
import 'package:spider/src/emojis.dart';

import 'utils.dart';

/// Generates dart class code using given data
class DartClassGenerator {
  bool verbose = false;
  final AssetGroup group;
  bool _processing = false;

  DartClassGenerator({this.group, this.verbose = false});

  /// generates dart class code and returns it as a single string
  void generate(bool watch) {
    if (watch) {
      _watchDirectory();
    }
    process();
  }

  void process() {
    var properties = createFileMap();
    var properties_strings = properties.keys.map<String>((name) {
      printVerbose(verbose, 'processing ${properties[name]}');
      var str = group.useStatic ? '\tstatic ' : '\t';
      str += group.useConst ? 'const ' : '';
      str +=
          'String ${Formatter.formatName(name)} = \'${Formatter.formatPath(properties[name])}\';';
      return str;
    }).toList();
    var dart_class = '''// Generated by spider on ${DateTime.now()}
    
class ${group.className} {
${properties_strings.join('\n')}
}''';
    writeToFile(
        name: Formatter.formatFileName(group.fileName ?? group.className),
        path: group.package,
        content: dart_class);
    _processing = false;
    stdout.writeln('Processed items: ${properties.length} ${Emojis.pin}');
  }

  /// Creates map from files list of a [dir] where key is the file name without
  /// extension and value is the path of the file
  Map<String, String> createFileMap() {
    var dir = group.path.endsWith('/') ? group.path : group.path + '/';
    if (!Directory(dir).existsSync()) {
      stderr.writeln('Directory "$dir" does not exist! ${Emojis.error}');
      exit(2);
    }
    var files =
        Directory(dir).listSync().where((file) => _isValidFile(file)).toList();

    if (files.isEmpty) {
      stderr.writeln(
          'Directory $dir does not contain any assets! ${Emojis.block}');
      exit(2);
    }
    return {
      for (var file in files)
        path.basenameWithoutExtension(file.path): file.path
    };
  }

  /// checks whether the file is valid file to be included or not
  /// 1. must be a file, not a directory
  /// 2. should be from one of the allowed types if specified any
  bool _isValidFile(File file) {
    return file.statSync().type == FileSystemEntityType.file &&
        (group.types.isEmpty ||
            group.types.contains(path.extension(file.path)));
  }

  /// Watches assets dir for file changes and rebuilds dart code
  void _watchDirectory() {
    stdout.writeln('Watching for changes in directory ${group.path}...');
    Directory(group.path).watch(events: FileSystemEvent.all).listen((data) {
      printVerbose(verbose, 'something changed...');
      if (!_processing) {
        _processing = true;
        Future.delayed(Duration(seconds: 1), () => process());
      }
    });
  }
}
